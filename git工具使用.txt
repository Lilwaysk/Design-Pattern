git 分布式代码存储仓库

git config --global user.name "Your Name"                // 用户名
git config --global user.email "youremail@domain.com"    // 邮箱
git config --global credentials.helper store             // 保存登陆状态
git config --global --list                               // 查看配置


创建一个仓库
1.首先先创建一个空目录
2.在目录中打开git bash
3.初始化仓库 git init 或者 git init --bare

克隆一个仓库
1.在git bash中输入 git clone 仓库地址


git中的工作区域和文件状态
工作区：.git所在的目录
暂存区：一般存放在.git目录下的index文件（.git/index）中，所以我们把暂存区看做是工作区中的一个阶段
本地仓库：就是通过命令 git init 创建的仓库，它包含了完整的项目历史和元数据，是git存储代码和版本信息的主要位置
远程仓库：远程仓库是托管在服务器上的代码仓库，可以理解为远程备份，远程仓库通常和本地仓库进行交互，如push、pull等操作。
-> git add 工作区到暂存区
-> git commit 暂存区到本地仓库
-> git push 本地仓库到远程仓库


git中文件的几种状态
未跟踪（Untracked）：新添加的文件（未被git跟踪的文件），使用git add命令将新文件添加到暂存区
已修改（Modified）：文件已经被修改，但还没有被添加到暂存区
已暂存（Staged）：文件已经被添加到暂存区，使用git commit命令将文件提交到本地仓库
已提交（Committed）：文件已经被提交到本地仓库，使用git push命令将文件推送到远程仓库

git add 从未跟踪到已暂存      使用git add 文件名 将单个文件推到暂存区
                             使用git add . 将所有更改的文件推到暂存区
git commit 从已暂存到已提交   使用git commit -m "备注信息" 来提交到仓库 如果不用-m 则会进入vim编辑界面
git push 从已提交到远程仓库
git rm 从已暂存到未跟踪
git reset 从已提交到已暂存
git checkout 从已暂存到未修改
git status 查看仓库状态
git log 查看仓库提交历史积累 git log --oneline 查看简洁版提交历史
git diff 查看文件修改内容


git reset的三种模式
git reset --soft   工作区保留 暂存区保留
git reset --mixed  工作区保留 暂存区不保留
git reset --hard   工作区不保留 暂存区不保留  
git reset --soft HEAD^ 回退到上一个版本




git diff 查看差异
可以查看工作区，暂存区，本地仓库之间的差异
git diff HEAD 查看工作区和本地仓库的差异
git diff --cached 查看暂存区和本地仓库的差异
git diff HEAD^ HEAD 查看最近两次提交的差异



使用命令 git rm 删除文件
git rm 文件名 删除暂存区文件
git rm --cached 文件名 删除暂存区文件，保留工作区文件
git rm -r* 递归删除某个目录下的所有子目录和文件


.gitignore文件
忽略文件，不提交到仓库中
gitignore文件中每一行代表一个忽略规则，匹配规则如下：
1.以斜杠“/”开头表示目录
2.以星号“*”通配多个字符
3.以问号“?”通配单个字符
4.以方括号“[]”包含单个字符的匹配列表
5.以叹号“!”表示取反
例：
# 忽略所有的 .a 文件
*.a
# 但跟踪 lib.a，即使前面有忽略规则
!lib.a
# 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO
/TODO
# 忽略任何目录下名为 build 的文件夹
build/
# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt
doc/*.txt
# 忽略 doc/ 目录下的 .pdf 文件
doc/**/*.pdf

git clone 从远程仓库克隆到本地仓库

git clone -b 分支名 仓库地址 克隆指定分支到本地仓库
git push -u origin master 将本地master分支推送到远程仓库
git pull 拉取远程仓库的代码

关联本地仓库和远程仓库
1.git remote add origin 仓库地址 
2.git remote -v 查看当前仓库所对应的远程仓库的别名和地址
3.git branch -M main 将当前分支重命名为main
4.git push -u origin main 将本地main分支推送到远程仓库