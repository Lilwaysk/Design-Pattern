#include <bits/stdc++.h>
using namespace std;

/*
    桥接模式 Bridge Pattern
    和Decorator模式一样，属于单一职责模式，也是为了解决子类急剧膨胀，同时充斥着
    大量重复代码，这时候的关键是划清责任

    动机
    由于某些类型的固有的实现逻辑，使得他们具有两个变化的维度，乃至多个维度的变化。
    
    所以利用Bridge模式将抽象部分与实现部分分离，是他们都可以独立的变化。

    要点总结
    1.Bridge模式使用“对象间的组合关系”解耦了抽象和实现之间固有的绑定关系，使得抽象
      和实现可以沿着各自的维度来变化。所谓抽象和实现沿着各自维度的变化，即“子类化他们”。
    2.Bridge模式有时候类似于多继承方案，但是多继承方案往往违背单一职责原则，复用性
      比较差。Bridge模式是比多继承方案更好的解决方法。
    3.Bridge模式的应用一般在“两个非常强的变化维度”。有时一个类也有多于两个的变化维度，
      这时可以使用Bridge的扩展模式。
*/

int main()
{
    return 0;
}